---
import type { HTMLAttributes } from 'astro/types';
import { Image } from 'astro:assets';

interface Props extends HTMLAttributes<"div"> {
  title: string;
  tag?: "h1" | "h2" | "h3";
  subtitle?: string;
  content?: string[];
  mediaPath?: string;
  altText?: string;
  videoPath?: string;
  contentWidth?: string;
  mediaWidth?: number;
  mediaHeight?: number;
  aspectRatio?: string;
  borderRadius?: string;
  layout?: 'media-left' | 'media-right' | 'media-top' | 'media-bottom';
  classes?: string;
}

const { 
  title, 
  tag = 'h1',
  subtitle,
  content,
  mediaPath, 
  altText = 'media-object media',
  videoPath,
  contentWidth= 'var(--measure-lg)',
  mediaWidth = 800,
  mediaHeight = 600,
  aspectRatio = '16 / 9',
  borderRadius = 'var(--radius-md)',
  layout = 'media-left',
  classes,
  ...rest  
} = Astro.props as Props;

// Dynamically import all images from the /src/assets directory
const images = import.meta.glob('@images/*.{jpeg,jpg,png,gif}', { eager: true }) as Record<string, { default: string }>;
// Resolve the image path if it's an image
const resolvedImagePath = mediaPath && /\.(jpeg|jpg|png|gif)$/.test(mediaPath) && images[`${mediaPath}`]?.default;
// Determine if the media is a video
const isVideo = mediaPath && /\.(mp4|webm|ogg)$/.test(mediaPath);

const Tag = tag; // Default tag
---

<style>
  .media-object { 
    display: flex; 
    flex-wrap: wrap; 
  }

  .media { 
    flex-grow: 1; 
    flex-basis: 20rem;  
  }

  .content {
    flex-basis: 0;
    flex-grow: 999;
    min-inline-size: 50%; /* ← works best as a percentage */
  }
  
  video { block-size: auto }
  
  :is(img, video) { 
    inline-size: 100%;
    display: flex;
  }

  :is(.media-left, .media-right) { align-items: flex-start }  
  /* ↓ media to the right or bottom of content */
  :is(.media-right, .media-bottom) .media { order: 2 }
  /* ↓ media 100% width if above or below content */
  :is(.media-top, .media-bottom) :is(.media, video) { inline-size: 100% }
  /* ↓ aspect ratio for videos */
  :is(.media-top, .media-bottom) video { aspect-ratio: var(--ratio-widescreen) }
  /* ↓ stack component */
  :is(.media-top, .media-bottom) .content {
    flex-direction: column;
    align-items: center;
    text-align: center;
  }

  .stack { --space: 1em; }
  
  .title { --space: .25em; }
  
  .subtitle {
    font-size:var(--font-size-sm);
    color: #555;
  }
</style>

<article class:list={['media-object', layout, classes]} {...rest}>
  
  <!-- Image or Video -->
  {(layout === 'media-left' || layout === 'media-right' || layout === 'media-top' || layout === 'media-bottom') && mediaPath && (
    <div class="media" style={`aspect-ratio: ${aspectRatio};`}>
      {isVideo ? (
        <video 
          controls 
          width={mediaWidth} 
          height={mediaHeight}
          style={`border-radius: ${borderRadius}; `}
        >
          <source src={mediaPath} type="video/mp4" />
          Your browser does not support the video tag.
        </video>
      ) : (
        resolvedImagePath && (
          <Image 
            src={resolvedImagePath} 
            width={mediaWidth} 
            height={mediaHeight} 
            alt={altText}
            style={`border-radius: ${borderRadius}; `}
          />
        )
      )}
    </div>
  )}
    
  
  
  <!-- content -->
  <div class="content stack" style={`max-inline-size: ${contentWidth};`}>
    {subtitle && <div class="subtitle">{subtitle}</div>}
    <Tag class="title">{title}</Tag>
    
    <!-- description -->
    {content && content.map((item) => (
      <p set:html={item}></p>
    ))}
    
    <!-- slotted -->
    <slot/>
  </div>
</article>
