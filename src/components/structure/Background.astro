---
import { getImage } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import type { HTMLAttributes } from 'astro/types';

interface BackgroundProperty {
  repeat?: string;
  position?: string;
  size?: string;
}

interface Props extends HTMLAttributes<"div"> {
  tag?: "div" | "section" | "article";
  gradients?: string[];
  imagePaths?: string[];
  backgroundProperties?: BackgroundProperty[];
  backgroundColor?: string;
  aspectRatio?: string;
  gradientsFirst?: boolean;
  classes?: string;
}

const {
  tag = 'div', // default to div if no tag is provided
  gradients = [],
  imagePaths = [],
  backgroundProperties = [],
  backgroundColor = 'transparent',
  aspectRatio = '16 / 9',
  gradientsFirst = true,
  classes,

  ...rest
} = Astro.props;

const defaultBackgroundProperty: BackgroundProperty = {
  repeat: 'no-repeat',
  position: 'center center',
  size: 'cover'
};

const images = import.meta.glob<{ default: ImageMetadata }>('@images/*.{jpeg,jpg,png,gif,webp,avif,svg}');

async function getImageBackgrounds(imagePaths: string[], backgroundProperties: BackgroundProperty[]): Promise<string[]> {
  return Promise.all(imagePaths.map(async (imagePath, index) => {
    if (!images[imagePath]) throw new Error(`"${imagePath}" does not exist in glob: "@images/*.{jpeg,jpg,png,gif,webp,avif,svg}"`);
    const imageModule = await images[imagePath]();
    const optimizedImage = await getImage({ src: imageModule.default });

    const { repeat, position, size } = { ...defaultBackgroundProperty, ...backgroundProperties[index] };
    return `url(${optimizedImage.src}) ${repeat} ${position} / ${size}`;
  }));
}

const imageBackgrounds = await getImageBackgrounds(imagePaths, backgroundProperties);
const backgrounds = gradientsFirst ? [...gradients, ...imageBackgrounds] : [...imageBackgrounds, ...gradients];
const background = backgrounds.join(', ');

const Tag = tag;
---

<style>
  .background {
    width: 100%;
    background-color: var(--background-color, transparent);
    aspect-ratio: var(--aspect-ratio, 16 / 9);
    background: var(--background);
  }
</style>

<Tag 
  class:list={['background', classes]} 
  style={`
    --background: ${backgrounds.length > 0 ? background : 'none'};
    --background-color: ${backgroundColor};
    --aspect-ratio: ${aspectRatio};
  `} 
  {...rest}
>
  <!-- content -->
  <slot/>
</Tag>