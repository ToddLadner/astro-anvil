---
import { getImage } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<"section"> {
  gradient?: string;
  color?: string;
  imagePath?: string;
  classes?: string;
}

const { 
  gradient, 
  color, 
  imagePath,
  classes,
  ...rest 
} = Astro.props;

const images = import.meta.glob<{ default: ImageMetadata }>('@images/*.{jpeg,jpg,png,gif}');

let background = '';

if (gradient) {
  background = gradient;
} else if (color) {
  background = color;
} else if (imagePath) {
  if (!images[imagePath]) throw new Error(`"${imagePath}" does not exist in glob: "src/img/*.{jpeg,jpg,png,gif}"`);
  const imageModule = await images[imagePath]();
  const optimizedImage = await getImage({ src: imageModule.default });
  background = `url(${optimizedImage.src}) no-repeat center center / cover`;
  console.log(imageModule)
}
---
<style define:vars={{ background }}>
  .background {
    background: var(--background);
    width: 100%;
    height: 100%;
    padding: 5rem;
  }
  .hero-content {
    max-width: var(--measure-lg);
  }
</style>

<section class:list={['background', 'grid', 'pile-grid', classes]} {...rest} >
  <div class="hero-content">
    <slot/>
  </div>
</section>
