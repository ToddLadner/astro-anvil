---
import type { HTMLAttributes } from 'astro/types';
import { Image } from 'astro:assets';
import type { StringLiteralType } from 'typescript';


interface Props extends HTMLAttributes<"div"> {
  title: string;
  subtitle?: string;
  content?: string[];
  imagePath?: string;
  videoPath?: string;
  altText?: string;
  contentWidth?: string;
  mediaWidth?: number;
  mediaHeight?: number;
  borderRadius?: string;
  layout?: 'media-left' | 'media-right' | 'media-top' | 'media-bottom' | 'layout-centered';
  classes?: string;
}


const { 
  title, 
  subtitle,
  content,
  imagePath, 
  videoPath,
  altText = 'Hero media',
  contentWidth= 'var(--measure-lg)',
  mediaWidth = 800,
  mediaHeight = 600,
  borderRadius = 'var(--radius-md)',
  layout = 'media-left',
  classes,
  ...rest  
} = Astro.props as Props;

// Dynamically import all images from the /src/assets directory
const images = import.meta.glob('@images/*.{jpeg,jpg,png,gif}', { eager: true }) as Record<string, { default: string }>;

// Resolve the image path
const resolvedImagePath = imagePath && images[`${imagePath}`]?.default;

// Video source (assuming video is in public folder or similar)
const videoSource = videoPath ? videoPath : '';

const Tag = 'h1'; // Default tag
---

<style>
  .hero { 
    display: flex; 
    flex-wrap: wrap; 
  }

  .media { flex-grow: 1 }

  .content {
    flex-basis: 0;
    flex-grow: 999;
    min-inline-size: 45ch;
    max-width: var(--measure-lg);
  }

  :is(img, video) { inline-size: 100%; }

  :is(.media-left, .media-right) { align-items: center }

  :is(.media-right, .media-bottom) .media { order: 2 }

  :is(.media-top, .media-bottom) :is(.media, video) { inline-size: 100% }

  :is(.media-top, .media-bottom) video { aspect-ratio: var(--ratio-widescreen) }

  :is(.media-top, .media-bottom) .content {
    flex-direction: column;
    align-items: center;
    text-align: center;
  }

  .title {
    font-size: var(--font-size-2xl);
    margin-bottom: 1rem;
  }
  .subtitle {
    font-size:var(--font-size-sm);
    color: #555;
  }


  .description p {
    font-size: 1.25rem;
    margin: 0.5rem 0;
  }

  .hero-slot {
    margin-top: 1rem;
  }
</style>

<div class:list={['hero', layout, classes]} {...rest}>
  
  <!-- Image -->
  {(layout === 'media-left' || layout === 'media-right') && resolvedImagePath && (
    <div class="media">
      <Image 
        src={resolvedImagePath} 
        width={mediaWidth} 
        height={mediaHeight} 
        alt={altText}
        style={`border-radius: ${borderRadius};`}
      />
    </div>
  )}
  
  <!-- Video -->
  {videoSource && (
    <div class="media">
      <video 
        controls 
        width={mediaWidth} 
        height={mediaHeight}
        style={`border-radius: ${borderRadius};`}
      >
        <source src={videoSource} type="video/mp4" />
        Your browser does not support the video tag.
      </video>
    </div>
  )}
    
  <!-- Layout layout-Centered -->
  {(layout === 'media-top' || layout === 'media-bottom') && resolvedImagePath && !videoSource && (
    <div class="media">
      <Image 
        src={resolvedImagePath} 
        width={mediaWidth} 
        height={mediaHeight} 
        alt={altText}
        style={`border-radius: ${borderRadius};`}
      />
    </div>
  )}

  <!-- content -->
  <div class="content">
    {subtitle && <div class="subtitle">{subtitle}</div>}
    <Tag class="title">{title}</Tag>
    {content && 
      <div class="description">
        {content.map((item) => (
          <p set:html={item}></p>
        ))}
      </div>
    }
    <div class="hero-slot">
      <slot></slot>
    </div>
  </div>
  <!-- /content -->
</div>
