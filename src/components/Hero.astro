---
import { getImage } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<"section"> {
  gradient?;
  gradients?: string[];
  imagePath?;
  imagePaths?: string[];
  color?: string;
  classes?: string;
  aspectRatio?: string;
}

const { 
  gradient,
  gradients = [], 
  imagePath,
  imagePaths = [],
  color,
  aspectRatio = '16 / 9',
  classes,
  ...rest 
} = Astro.props;

const images = import.meta.glob<{ default: ImageMetadata }>('@images/*.{jpeg,jpg,png,gif,webp,avif}');

let backgrounds = [...gradients];

if (gradient) backgrounds.push(gradient);
if (color) backgrounds.push(color);

if (imagePath) {
  if (!images[imagePath]) throw new Error(`"${imagePath}" does not exist in glob: "@images/*.{jpeg,jpg,png,gif,webp,avif}"`);
  const imageModule = await images[imagePath]();
  const optimizedImage = await getImage({ src: imageModule.default });
  const imageUrl = `url(${optimizedImage.src}) no-repeat center center / cover`;
  backgrounds.push(imageUrl);
}

for (const imagePath of imagePaths) {
  if (!images[imagePath]) throw new Error(`"${imagePath}" does not exist in glob: "src/img/*.{jpeg,jpg,png,gif}"`);
  const imageModule = await images[imagePath]();
  const optimizedImage = await getImage({ src: imageModule.default });
  const imageUrl = `url(${optimizedImage.src}) no-repeat center center / cover`;
  backgrounds.push(imageUrl);
}

const background = backgrounds.join(', ');
---
<style define:vars={{ background, aspectRatio }}>
  .background {
    background: var(--background);
    aspect-ratio: var(--aspectRatio);
    width: 100%;
    
    > * { max-width: fit-content; }
  }
</style>

<section class:list={['background', 'grid', 'pile-grid', classes]} {...rest} >
    <slot/>
</section>
