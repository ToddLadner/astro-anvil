---
import { getImage } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<"section"> {
  gradient?: string;
  gradients?: string[];
  imagePath?: string;
  imagePaths?: string[];
  backgroundColor?: string;
  aspectRatio?: string;
  classes?: string;
  tag?: "div" | "section" | "article";
  backgroundRepeat?: string;
  backgroundPosition?: string;
  backgroundSize?: string;
}

const {
  gradient,
  gradients = [],
  imagePath,
  imagePaths = [],
  backgroundColor,
  aspectRatio = '16 / 9',
  classes,
  backgroundRepeat = 'no-repeat',
  backgroundPosition = 'center center',
  backgroundSize = 'cover',
  tag = 'section', // default to section if no tag is provided
  ...rest
} = Astro.props;

const images = import.meta.glob<{ default: ImageMetadata }>('@images/*.{jpeg,jpg,png,gif,webp,avif}');

let backgrounds = [...gradients];

if (gradient) backgrounds.push(gradient);
if (backgroundColor) backgrounds.push(backgroundColor);

if (imagePath) {
  if (!images[imagePath]) throw new Error(`"${imagePath}" does not exist in glob: "@images/*.{jpeg,jpg,png,gif,webp,avif}"`);
  const imageModule = await images[imagePath]();
  const optimizedImage = await getImage({ src: imageModule.default });
  const imageUrl = `url(${optimizedImage.src}) ${backgroundRepeat} ${backgroundPosition} / ${backgroundSize}`;
  backgrounds.push(imageUrl);
}

for (const imagePath of imagePaths) {
  if (!images[imagePath]) throw new Error(`"${imagePath}" does not exist in glob: "src/img/*.{jpeg,jpg,png,gif}"`);
  const imageModule = await images[imagePath]();
  const optimizedImage = await getImage({ src: imageModule.default });
  const imageUrl = `url(${optimizedImage.src}) ${backgroundRepeat} ${backgroundPosition} / ${backgroundSize}`;
  backgrounds.push(imageUrl);
}

const background = backgrounds.join(', ');

const Tag = tag;
---

<style>
  .background {
    width: 100%;
  }
  .inner-wrapper {
    max-width: fit-content;
  }
</style>

<Tag 
  class:list={['background', 'grid','pile-grid', classes]} 
  style={`background: ${background}; aspect-ratio: ${aspectRatio};`} 
  {...rest}
> 
  <slot/>
</Tag>
