---
import { getImage } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<"div"> {
  gradient?: string;
  gradients?: string[];
  imagePath?: string;
  imagePaths?: string[];
  backgroundColor?: string;
  classes?: string;
  aspectRatio?: string;
  tag?: 'div' | 'article' | 'section';
}

const { 
  gradient,
  gradients = [], 
  imagePath,
  imagePaths = [],
  backgroundColor,
  aspectRatio = '16 / 9',
  tag = 'div', // defaults to div if no tag is provided
  classes,
  ...rest 
} = Astro.props;

const images = import.meta.glob<{ default: ImageMetadata }>('@images/*.{jpeg,jpg,png,gif,webp,avif}');

let backgrounds = [...gradients];

if (gradient) backgrounds.push(gradient);
if (backgroundColor) backgrounds.push(backgroundColor);

if (imagePath) {
  if (!images[imagePath]) throw new Error(`"${imagePath}" does not exist in glob: "@images/*.{jpeg,jpg,png,gif,webp,avif}"`);
  const imageModule = await images[imagePath]();
  const optimizedImage = await getImage({ src: imageModule.default });
  const imageUrl = `url(${optimizedImage.src}) no-repeat center center / cover`;
  backgrounds.push(imageUrl);
}

for (const imagePath of imagePaths) {
  if (!images[imagePath]) throw new Error(`"${imagePath}" does not exist in glob: "src/img/*.{jpeg,jpg,png,gif}"`);
  const imageModule = await images[imagePath]();
  const optimizedImage = await getImage({ src: imageModule.default });
  const imageUrl = `url(${optimizedImage.src}) no-repeat center center / cover`;
  backgrounds.push(imageUrl);
}

const background = backgrounds.join(', ');

const Tag = tag; // Similar to const Element = 'div'
---

<style define:vars={{ background, aspectRatio }}>
  .background {
    background: var(--background);
    aspect-ratio: var(--aspectRatio);
    width: 100%;
  }
</style>

<Tag>
  <div class:list={['background', 'grid', 'pile-grid', classes]} {...rest}>
    <slot/>
  </div>
</Tag>
