---
// https://codepen.io/miunau/pen/oNVaJoN?editors=1100
// https://codepen.io/miriamsuzanne/pen/yLwRpGQ?editors=1100

import { getImage } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import type { HTMLAttributes } from 'astro/types';

interface BackgroundProperty {
  repeat?: string;
  position?: string;
  size?: string;
}

interface Props extends HTMLAttributes<"div"> {
  tag?: "div" | "section" | "article";
  gradients?: string[];
  imagePaths?: string[];
  backgroundProperties?: BackgroundProperty[];
  backgroundRepeat?: string;
  backgroundPosition?: string;
  backgroundSize?: string;
  backgroundColor?: string;
  aspectRatio?: string;
  gradientsFirst?: boolean;
  classes?: string;
}

const {
  tag = 'div', // default to div if no tag is provided
  gradients = [],
  imagePaths = [],
  backgroundProperties = [],
  backgroundRepeat = 'no-repeat',
  backgroundPosition = 'center center',
  backgroundSize = 'cover',
  backgroundColor = 'transparent',
  aspectRatio = '16 / 9',
  gradientsFirst = true,
  classes,
  ...rest
} = Astro.props;

const images = import.meta.glob<{ default: ImageMetadata }>('@images/*.{jpeg,jpg,png,gif,webp,avif,svg}');

let imageBackgrounds: string[] = [];

async function processImagePath(imagePath: string, index: number) {
  if (!images[imagePath]) throw new Error(`"${imagePath}" does not exist in glob: "@images/*.{jpeg,jpg,png,gif,webp,avif,svg}"`);
  const imageModule = await images[imagePath]();
  const optimizedImage = await getImage({ src: imageModule.default });

  // Get the specific background properties if available
  const { repeat = backgroundRepeat, position = backgroundPosition, size = backgroundSize } = backgroundProperties[index] || {};

  // Construct imageUrl with specific background properties
  const imageUrl = `url(${optimizedImage.src}) ${repeat} ${position} / ${size}`;

  // Push imageUrl into imageBackgrounds array
  imageBackgrounds.push(imageUrl);
}

const imagePathPromises = imagePaths.map((imagePath, index) => processImagePath(imagePath, index));

await Promise.all(imagePathPromises);

let backgrounds: string[];
if (gradientsFirst) {
  backgrounds = [...gradients, ...imageBackgrounds];
} else {
  backgrounds = [...imageBackgrounds, ...gradients];
}

const background = backgrounds.join(', ');

const Tag = tag;
---

<style>
  .background {
    width: 100%;
  }
</style>

<Tag 
  class:list={['background', classes]} 
  style={`
    ${backgrounds.length > 0 ? `background: ${background};` : ''} 
    background-color: ${backgroundColor}; 
    aspect-ratio: ${aspectRatio};
  `} 
  {...rest}
>
  <!-- content -->
  <slot/>
</Tag>
